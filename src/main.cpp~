#include <opencv2/core/core.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/imgproc/imgproc.hpp>
#include <opencv2/video/tracking.hpp>
#include <opencv2/tracking.hpp>
#include <opencv2/video/video.hpp>
#include <iostream>
#include <vector>

using namespace cv;
using namespace std;

RNG rng(12345);

void bounding_box_detection(Mat& input_img, Mat& output_img, Mat& output_img2, bool& flag)
{

	Mat occludedSquare = input_img;
	//resize(occludedSquare, occludedSquare, Size(0, 0), 0.25, 0.25);
	//resize(input_img, output_img2, Size(0, 0), 0.25, 0.25);
	Mat occludedSquare8u;
	cvtColor(occludedSquare, occludedSquare8u, CV_BGR2GRAY);

	Mat thresh;
	threshold(occludedSquare8u, thresh, 20, 255.0, THRESH_BINARY_INV);
	//threshold(occludedSquare8u, thresh, 80, 80.0, THRESH_BINARY_INV);


	//morphological opening (removes small objects from the foreground)
	erode(thresh, thresh, getStructuringElement(MORPH_ELLIPSE, Size(5, 5)));
	dilate(thresh, thresh, getStructuringElement(MORPH_ELLIPSE, Size(5, 5)));

	//morphological closing (removes small holes from the foreground)
	dilate(thresh, thresh, getStructuringElement(MORPH_ELLIPSE, Size(5, 5)));
	erode(thresh, thresh, getStructuringElement(MORPH_ELLIPSE, Size(5, 5)));


	GaussianBlur(thresh, thresh, Size(7, 7), 2.0, 2.0);




	imshow("thre", thresh);




	Mat edges;
	Canny(thresh, edges, 66.0, 133.0, 3);



	vector<vector<Point> > contours;
	vector<Vec4i> hierarchy;

	findContours(edges, contours, hierarchy, RETR_TREE, CHAIN_APPROX_SIMPLE, Point(0, 0));



	/// Approximate contours to polygons + get bounding rects and circles
	vector<vector<Point> > contours_poly(contours.size());
	vector<Rect> boundRect(contours.size());
	vector<Point2f>center(contours.size());
	vector<float>radius(contours.size());

	for (int i = 0; i < contours.size(); i++)
	{
		approxPolyDP(Mat(contours[i]), contours_poly[i], 3, true);
		boundRect[i] = boundingRect(Mat(contours_poly[i]));
		//minEnclosingCircle((Mat)contours_poly[i], center[i], radius[i]);
	}

	/// Draw polygonal contour + bonding rects + circles
	Mat drawing2 = Mat::zeros(thresh.size(), CV_8UC3);
	for (int i = 0; i< contours.size(); i++)
	{
		Point diff = boundRect[i].tl() - boundRect[i].br();
		double diagonal = sqrt(diff.x*diff.x + diff.y*diff.y);
		//cout << "diagonal" << endl;
		//cout << diagonal << endl;
		if (diagonal > 30) {
			flag = true;
			Scalar color = Scalar(rng.uniform(0, 255), rng.uniform(0, 255), rng.uniform(0, 255));
			drawContours(drawing2, contours_poly, i, color, 1, 8, vector<Vec4i>(), 0, Point());
			rectangle(drawing2, boundRect[i].tl(), boundRect[i].br(), color, 2, 8, 0);
			rectangle(output_img2, boundRect[i].tl(), boundRect[i].br(), color, 2, 8, 0);
		}
	}
	output_img = drawing2;
}


int main(int argc, char* argv[])
{
	bool Detection_Flag=false;

	//cv::Ptr<Tracker> tracker = Tracker::create("MIL");
	
	VideoCapture video("C:/Users/Orson Lin/Desktop/kenland_farm_Feb24.mov");

	// Check video is open
	if (!video.isOpened())
	{
		cout << "Could not read video file" << endl;
		return 1;
	}

	// Read first frame. 
	Mat frame;
	Mat frame2;
	video.read(frame);
	while (video.read(frame))
	{
		Mat boundingboxFrame;
		resize(frame, frame, Size(0, 0), 0.25, 0.25);

		//detect bounding box

		//if (!Detection_Flag) {
			bounding_box_detection(frame, boundingboxFrame, frame, Detection_Flag);
		//}

	


		//imshow("BF", boundingboxFrame);
		imshow("cam2", frame);

		int k = waitKey(1);
		if (k == 27) break;
	}

	return 0;
}